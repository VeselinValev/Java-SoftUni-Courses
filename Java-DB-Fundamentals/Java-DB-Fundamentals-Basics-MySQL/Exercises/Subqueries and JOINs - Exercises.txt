--1.	Employee Address--

SELECT e.employee_id, e.job_title, a.address_id, a.address_text FROM employees AS e
JOIN addresses AS a
ON e.address_id = a.address_id
ORDER BY e.address_id LIMIT 5;

--2.	Addresses with Towns--

SELECT e.first_name, e.last_name, t.name AS town, a.address_text FROM employees AS e
JOIN addresses AS a
ON e.address_id = a.address_id
JOIN towns AS t
ON t.town_id = a.town_id
ORDER BY e.first_name, e.last_name LIMIT 5;

--3.	Sales Employee--

SELECT e.employee_id, e.first_name, e.last_name, d.name AS department_name  FROM employees AS e
JOIN departments AS d
ON e.department_id = d.department_id
WHERE d.name = 'Sales'
ORDER BY e.employee_id DESC;

--4.	Employee Departments--

SELECT e.employee_id, e.first_name, e.salary, d.name AS department_name  FROM employees AS e
JOIN departments AS d
ON e.department_id = d.department_id
WHERE e.salary > 15000
ORDER BY e.department_id DESC LIMIT 5;

--5.	Employees Without Project--

SELECT e.employee_id, e.first_name FROM employees AS e
LEFT JOIN employees_projects AS ep
ON e.employee_id = ep.employee_id
WHERE ep.employee_id IS NULL
ORDER BY e.employee_id DESC LIMIT 3;

--6.	Employees Hired After--

SELECT e.first_name, e.last_name, e.hire_date, d.name AS dept_name FROM employees AS e
JOIN departments AS d
ON e.department_id = d.department_id
WHERE DATE(e.hire_date) > '1999-1-1' AND (d.name = 'Sales' OR d.name = 'Finance')
ORDER BY e.hire_date;

--7.	Employees with Project--

SELECT e.employee_id, e.first_name, p.name AS project_name FROM employees AS e
JOIN employees_projects AS ep
ON e.employee_id = ep.employee_id
JOIN projects AS p
ON ep.project_id = p.project_id
WHERE DATE(p.start_date) > '2002-08-13' AND p.end_date IS NULL
ORDER BY e.first_name, p.name LIMIT 5;

--8.	Employee 24--

SELECT e.employee_id, e.first_name, IF(YEAR(p.start_date) < 2005, p.name, NULL) AS project_name FROM employees AS e
JOIN employees_projects AS ep
ON e.employee_id = ep.employee_id
JOIN projects AS p
ON ep.project_id = p.project_id
WHERE e.employee_id = 24
ORDER BY p.name;

--9.	Employee Manager--

SELECT e.employee_id, e.first_name, e.manager_id, m.first_name AS manager_name
FROM employees AS e
JOIN employees AS m ON e.manager_id = m.employee_id
WHERE e.manager_id IN (3, 7)
ORDER BY e.first_name;

--10.	Employee Summary--

SELECT e.employee_id, CONCAT(e.first_name, ' ', e.last_name) AS employee_name, CONCAT(m.first_name, ' ', m.last_name) AS manager_name, d.name AS department_name
FROM employees AS e
JOIN employees AS m ON e.manager_id = m.employee_id
JOIN departments AS d ON e.department_id = d.department_id
WHERE e.manager_id IS NOT NULL
ORDER BY e.employee_id LIMIT 5;

--11.	Min Average Salary--

SELECT AVG(e.salary) AS min_average_salary FROM employees AS e
GROUP BY e.department_id
ORDER BY min_average_salary LIMIT 1;

--12.	Highest Peaks in Bulgaria--

SELECT country_code, mountain_range, peak_name, elevation FROM peaks AS p
JOIN mountains AS m ON p.mountain_id = m.id
JOIN mountains_countries AS c ON m.id = c.mountain_id
WHERE c.country_code = 'BG' AND p.elevation > 2835
ORDER BY p.elevation DESC;

--13.	Count Mountain Ranges--

SELECT country_code, COUNT(mc.country_code) AS mountain_range FROM mountains_countries AS mc
GROUP BY mc.country_code
HAVING mc.country_code IN ('BG', 'RU', 'US')
ORDER BY mountain_range DESC;

--14.	Countries with Rivers--

SELECT c.country_name, r.river_name FROM countries as c
LEFT JOIN countries_rivers AS cr ON c.country_code = cr.country_code
LEFT JOIN rivers AS r ON cr.river_id = r.id
WHERE c.continent_code = 'AF'
ORDER BY c.country_name LIMIT 5;

--15.	*Continents and Currencies--

SELECT continent_code, currency_code, COUNT(currency_code) AS currency_usage FROM countries c1
GROUP BY continent_code, currency_code
HAVING currency_usage > 1 AND currency_usage = (SELECT COUNT(c2.currency_code) AS currency_code 
FROM countries AS c2
WHERE c2.continent_code = c1.continent_code
GROUP BY c2.currency_code
ORDER BY currency_code DESC LIMIT 1)
ORDER BY continent_code, currency_code;

--16.	Countries without any Mountains--

SELECT (SELECT COUNT(c.country_code) AS country_count FROM countries AS c) - COUNT(DISTINCT mc.country_code) AS country_count FROM mountains_countries mc;

--17.	Highest Peak and Longest River by Country--

SELECT DISTINCT c.country_name,
(SELECT p.elevation FROM peaks AS p
JOIN mountains_countries AS mc2 ON p.mountain_id = mc2.mountain_id
WHERE c.country_code = mc2.country_code
GROUP BY country_code
ORDER BY p.elevation DESC LIMIT 1) AS highest_peak_elevation,
(SELECT r2.`length` FROM rivers AS r2
JOIN countries_rivers AS cr2 ON r2.id = cr2.river_id
WHERE c.country_code = cr2.country_code
GROUP BY country_code
ORDER BY p.elevation DESC LIMIT 1) AS longest_river_length FROM countries AS c
LEFT JOIN countries_rivers AS cr ON c.country_code = cr.country_code
LEFT JOIN mountains_countries AS mc ON c.country_code = mc.country_code
LEFT JOIN peaks AS p ON mc.mountain_id = p.mountain_id
LEFT JOIN rivers AS r ON cr.river_id = r.id
ORDER BY highest_peak_elevation DESC, longest_river_length DESC, c.country_name
LIMIT 5;
