--1.	One-To-One Relationship--

CREATE TABLE passports(
passport_id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
passport_number VARCHAR(8) UNIQUE
);

CREATE TABLE persons(
person_id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
first_name VARCHAR(50) NOT NULL,
salary DECIMAL(10,2),
passport_id INT UNSIGNED UNIQUE,
FOREIGN KEY (passport_id) REFERENCES passports(passport_id)
);

INSERT INTO passports(passport_id, passport_number)
VALUES (101, 'N34FG21B'),
(102, 'K65LO4R7'),
(103, 'ZE657QP2');

INSERT INTO persons(first_name, salary, passport_id)
VALUES ('Roberto', 43300.00, 102), 
('Tom', 56100.00, 103),
('Yana', 60200.00, 101);

--2.	One-To-Many Relationship--

CREATE TABLE manufacturers(
manufacturer_id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
name VARCHAR(50) NOT NULL,
established_on DATE NOT NULL
);

CREATE TABLE models(
model_id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
name VARCHAR(50) NOT NULL,
manufacturer_id INT UNSIGNED,
FOREIGN KEY (manufacturer_id) REFERENCES manufacturers(manufacturer_id)
);

INSERT INTO manufacturers(name, established_on)
VALUES ('BMW',	'1916-03-01'),
('Tesla', '2003-01-01'),
('Lada',	'1966-05-01');

INSERT INTO models(model_id, name, manufacturer_id)
VALUES (101, 'X1', 1),
(102, 'i6', 1),
(103, 'Model S', 2),
(104,	'Model X', 2),
(105, 'Model 3', 2),
(106,	'Nova', 3);

--3.	Many-To-Many Relationship--

CREATE TABLE students(
student_id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
name VARCHAR(50) NOT NULL
);

CREATE TABLE exams(
exam_id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
name VARCHAR(50) NOT NULL
);

CREATE TABLE students_exams(
student_id INT UNSIGNED,
exam_id INT UNSIGNED,
CONSTRAINT pk_student_exam
PRIMARY KEY (student_id, exam_id),
CONSTRAINT fk_students_student_id
FOREIGN KEY (student_id) REFERENCES students(student_id),
CONSTRAINT fk_exam_exam_id
FOREIGN KEY (exam_id) REFERENCES exams(exam_id)
);

INSERT INTO students(name)
VALUES ('Mila'), ('Toni'), ('Ron');

INSERT INTO exams(exam_id, name)
VALUES (101, 'Spring MVC'), (102, 'Neo4j'), (103, 'Oracle 11g');

INSERT INTO students_exams(student_id, exam_id)
VALUES (1, 101), (1, 102), (2, 101), (3, 103), (2, 102), (2, 103);

--4.	Self-Referencing--

CREATE TABLE teachers(
teacher_id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
name VARCHAR(50) NOT NULL,
manager_id INT UNSIGNED
) AUTO_INCREMENT=101;

INSERT INTO teachers(name, manager_id)
VALUES ('John', NULL), ('Maya', 106), ('Silvia', 106), ('Ted', 105), ('Mark', 101), ('Greta', 101);

ALTER TABLE teachers
ADD CONSTRAINT fk_teacher_manager_id
FOREIGN KEY (manager_id) REFERENCES teachers(teacher_id)

--5.	Online Store Database--

CREATE TABLE items(
item_id INT(11) PRIMARY KEY AUTO_INCREMENT,
name VARCHAR(50) NOT NULL,
item_type_id INT(11)
);

CREATE TABLE item_types(
item_type_id INT(11) PRIMARY KEY AUTO_INCREMENT,
name VARCHAR(50) NOT NULL
);

CREATE TABLE order_items(
order_id INT(11),
item_id INT(11),
CONSTRAINT pk_order_id_item_id PRIMARY KEY (order_id, item_id)
);

CREATE TABLE orders(
order_id INT(11) PRIMARY KEY AUTO_INCREMENT,
customer_id INT(11)
);

CREATE TABLE customers(
customer_id INT(11) PRIMARY KEY AUTO_INCREMENT,
name VARCHAR(50) NOT NULL,
birthday DATE,
city_id INT(11)
);

CREATE TABLE cities(
city_id INT(11) PRIMARY KEY AUTO_INCREMENT,
name VARCHAR(50) NOT NULL
);

ALTER TABLE items
ADD CONSTRAINT fk_item_type_id
FOREIGN KEY (item_type_id) REFERENCES item_types(item_type_id);

ALTER TABLE customers
ADD CONSTRAINT fk_city_id
FOREIGN KEY (city_id) REFERENCES cities(city_id);

ALTER TABLE orders
ADD CONSTRAINT fk_customer_id
FOREIGN KEY (customer_id) REFERENCES customers(customer_id);

ALTER TABLE order_items
ADD CONSTRAINT fk_order_id
FOREIGN KEY (order_id) REFERENCES orders(order_id),
ADD CONSTRAINT fk_item_id
FOREIGN KEY (item_id) REFERENCES items(item_id);

--6.	University Database--

CREATE TABLE students(
student_id INT(11) PRIMARY KEY AUTO_INCREMENT,
student_number VARCHAR(12) NOT NULL,
student_name VARCHAR(50) NOT NULL,
major_id INT(11)
);

CREATE TABLE subjects(
subject_id INT(11) PRIMARY KEY AUTO_INCREMENT,
subject_name VARCHAR(50) NOT NULL
);

CREATE TABLE agenda(
student_id INT(11),
subject_id INT(11),
CONSTRAINT pk_student_id_subject_id PRIMARY KEY (student_id, subject_id)
);

CREATE TABLE majors(
major_id INT(11) PRIMARY KEY AUTO_INCREMENT,
name VARCHAR(50) NOT NULL
);

CREATE TABLE payments(
payment_id INT(11) PRIMARY KEY AUTO_INCREMENT,
payment_date DATE,
payment_amount DECIMAL(8,2),
student_id INT(11)
);

ALTER TABLE agenda
ADD CONSTRAINT fk_student_id
FOREIGN KEY (student_id) REFERENCES students(student_id),
ADD CONSTRAINT fk_subject_id
FOREIGN KEY (subject_id) REFERENCES subjects(subject_id);

ALTER TABLE students
ADD CONSTRAINT fk_major_id
FOREIGN KEY (major_id) REFERENCES majors(major_id);

ALTER TABLE payments
ADD CONSTRAINT fk_student_id_payments
FOREIGN KEY (student_id) REFERENCES students(student_id);

--9.	Peaks in Rila--

SELECT m.mountain_range, p.peak_name, p.elevation FROM mountains AS m
JOIN peaks AS p ON p.mountain_id = m.id
WHERE m.id = 17
ORDER BY p.elevation DESC;