--1.	Employees with Salary Above 35000--

CREATE PROCEDURE usp_get_employees_salary_above_35000()
BEGIN
SELECT first_name, last_name FROM employees
WHERE salary > 35000 ORDER BY first_name, last_name, employee_id;
END;

--2.	Employees with Salary Above Number--

DELIMITER $$
CREATE PROCEDURE usp_get_employees_salary_above(salary_size DOUBLE(19, 4))
BEGIN
SELECT first_name, last_name FROM employees
WHERE salary >= salary_size ORDER BY first_name, last_name, employee_id;
END
END $$

--3.	Town Names Starting With--

CREATE PROCEDURE usp_get_towns_starting_with(start_text VARCHAR(50))
BEGIN
SELECT name FROM towns
WHERE name LIKE CONCAT(start_text, "%") ORDER BY name;
END;

--4.	Employees from Town--

CREATE PROCEDURE usp_get_employees_from_town(town_name VARCHAR(50))
BEGIN
SELECT e.first_name, e.last_name FROM employees AS e
JOIN addresses AS a ON e.address_id = a.address_id
JOIN towns AS t ON a.town_id = t.town_id
WHERE t.name = town_name ORDER BY e.first_name, e.last_name, e.employee_id;
END;

--5.	Salary Level Function--

CREATE FUNCTION ufn_get_salary_level(employee_salary DOUBLE(15, 2))
RETURNS VARCHAR(10)
BEGIN
	DECLARE result VARCHAR(10);
	IF employee_salary < 30000 THEN SET result := "Low";
	ELSEIF employee_salary <= 50000 THEN SET result := "Average";
	ELSE SET result := "High";
	END IF;
	RETURN result;
END;

--6.	Employees by Salary Level--

CREATE FUNCTION ufn_get_salary_level(employee_salary DOUBLE(15, 2))
RETURNS VARCHAR(10)
BEGIN
	DECLARE result VARCHAR(10);
	IF employee_salary < 30000 THEN SET result := "Low";
	ELSEIF employee_salary <= 50000 THEN SET result := "Average";
	ELSE SET result := "High";
	END IF;
	RETURN result;
END;

CREATE PROCEDURE usp_get_employees_by_salary_level(salary_level VARCHAR(7))
BEGIN
	SELECT e.first_name, e.last_name FROM employees AS e
	WHERE ufn_get_salary_level(e.salary) = salary_level
	ORDER BY e.first_name DESC, e.last_name DESC;
END;

--7.	Define Function--

CREATE FUNCTION ufn_is_word_comprised(set_of_letters varchar(50), word varchar(50))
RETURNS BIT
RETURN word REGEXP (concat('^[', set_of_letters, ']+$'));

--8.	* Delete Employees and Departments--

SET FOREIGN_KEY_CHECKS=0;

DELETE FROM employees
WHERE department_id IN (7,8);

DELETE FROM departments
WHERE name IN ("Production", "Production Control");

SET FOREIGN_KEY_CHECKS=1;

--9.	Find Full Name--

CREATE PROCEDURE usp_get_holders_full_name()
BEGIN
	SELECT CONCAT(ah.first_name, " ", ah.last_name) AS full_name FROM account_holders AS ah
	ORDER BY full_name, ah.id;	
END;

--10.	People with Balance Higher Than--

CREATE PROCEDURE usp_get_holders_with_balance_higher_than(balance DECIMAL(19, 4))
BEGIN
    SELECT 
         h.first_name, h.last_name
    FROM
        `account_holders` AS h
            JOIN
        (SELECT 
            a.id, a.account_holder_id, SUM(a.balance) AS 'total_balance'
        FROM
            `accounts` AS a
        GROUP BY (a.account_holder_id)
        HAVING `total_balance` > balance) as a ON h.id = a.account_holder_id
    ORDER BY a.id;
END

--11.	Future Value Function--

CREATE FUNCTION ufn_calculate_future_value(amount DOUBLE(19,2), interest DOUBLE(19,2), number_of_years INTEGER)
RETURNS DOUBLE(19,2)
RETURN amount * (POW((1 + interest), number_of_years));

--12.	Calculating Interest--

CREATE FUNCTION ufn_calculate_future_value(amount DECIMAL(19,4), interest DECIMAL(19,4), number_of_years INTEGER)
RETURNS DECIMAL(19,4)
RETURN amount * (POW((1 + interest), number_of_years));

CREATE PROCEDURE usp_calculate_future_value_for_account(id INTEGER, interest_rate DECIMAL(19, 4))
BEGIN
	SELECT a.id AS account_id, ah.first_name, ah.last_name, a.balance AS current_balance, ufn_calculate_future_value(a.balance, interest_rate, 5) AS balance_in_5_years
	FROM account_holders AS ah
	INNER JOIN accounts AS a ON ah.id = a.account_holder_id
	WHERE a.id = id;
END;

--13.	Deposit Money--

CREATE PROCEDURE usp_deposit_money(id INTEGER, amount DECIMAL(19, 4))
BEGIN
	IF amount > 0 THEN UPDATE accounts AS a SET balance = balance + amount
		WHERE a.id = id;
	END IF;
END;

--14.	Withdraw Money--

CREATE PROCEDURE usp_withdraw_money(id INTEGER, amount DECIMAL(19, 4))
BEGIN
	IF amount > 0 THEN
		START TRANSACTION;
		UPDATE accounts AS a SET balance = balance - amount
		WHERE a.id = id;
		IF (SELECT a.balance FROM accounts AS a 
			JOIN account_holders AS ah ON a.id = ah.id
			WHERE a.id = id) < 0 THEN ROLLBACK;
		ELSE COMMIT;
		END IF;
	END IF;
END;

--15.	Money Transfer--

CREATE PROCEDURE usp_transfer_money(from_account_id INTEGER, to_account_id INTEGER, amount DECIMAL(19, 4)) 
BEGIN
	IF (EXISTS (SELECT a.id FROM accounts AS a WHERE a.id = from_account_id)) AND 
	(EXISTS (SELECT a.id FROM accounts AS a WHERE a.id = to_account_id)) AND amount > 0 AND
	(SELECT a.balance FROM accounts AS a WHERE a.id = from_account_id) > amount AND from_account_id != to_account_id
		THEN 
			UPDATE accounts SET balance = balance + amount WHERE id = to_account_id;
			UPDATE accounts SET balance = balance - amount WHERE id = from_account_id;
			COMMIT;
	END IF;
END;

--16.	Log Accounts Trigger--

CREATE TABLE `logs`(
log_id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
account_id INT NOT NULL,
old_sum DECIMAL(19, 4) NOT NULL,
new_sum DECIMAL(19, 4) NOT NULL
);

CREATE TRIGGER tr_after_balance_update
AFTER UPDATE ON accounts
FOR EACH ROW
BEGIN
	IF NEW.balance <> OLD.balance
	THEN INSERT INTO `logs`(account_id, old_sum, new_sum) VALUES (OLD.id, OLD.balance, NEW.balance);
END IF;
END;

--17.	Emails Trigger--

CREATE TABLE `logs`(
log_id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
account_id INT NOT NULL,
old_sum DECIMAL(19, 4) NOT NULL,
new_sum DECIMAL(19, 4) NOT NULL
);

CREATE TRIGGER tr_after_balance_update
AFTER UPDATE ON accounts
FOR EACH ROW
BEGIN
	IF NEW.balance <> OLD.balance
	THEN INSERT INTO `logs`(account_id, old_sum, new_sum) VALUES (OLD.id, OLD.balance, NEW.balance);
END IF;
END;

CREATE TABLE notification_emails(
id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
recipient INT NOT NULL,
subject VARCHAR(255) NOT NULL,
body VARCHAR(255) NOT NULL
);

CREATE TRIGGER tr_logs_notification_emails
AFTER INSERT ON `logs`
FOR EACH ROW
BEGIN
	INSERT INTO `notification_emails`(recipient, subject, body)
	VALUES (NEW.account_id, CONCAT("Balance change for account: ", NEw.account_id),
	CONCAT("On ", DATE_FORMAT(NOW(), '%b %d %Y at %r'), " your balance was changed from ", ROUND(NEW.old_sum, 2), " to ", ROUND(NEW.new_sum, 2), "."));
END;