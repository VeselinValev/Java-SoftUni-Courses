--1.

function solve(object){
    let methodOptions = ["GET", "POST", 'DELETE', "CONNECT"];
    let uriRegex = /^(([\d\w]*\.+[\d\w]+)+)|\*$/;
    let versionOptions = ["HTTP/0.9", "HTTP/1.0", "HTTP/1.1", "HTTP/2.0"];
    let messageRegex = /^([^<>\\&'"]*)$/;
    if (methodOptions.includes(object.method) === false || object.hasOwnProperty("method") === false){
        throw new Error("Invalid request header: Invalid Method");
    }
    let match = uriRegex.exec(object.uri);
    if (match === null || object.hasOwnProperty("uri") === false){
        throw new Error("Invalid request header: Invalid URI");
    }
    if (versionOptions.includes(object.version) === false || object.hasOwnProperty("version") === false){
        throw new Error("Invalid request header: Invalid Version");
    }
    let match2 = messageRegex.exec(object.message);
    if (match2 === null || object.hasOwnProperty("message") === false){
        throw new Error("Invalid request header: Invalid Message");
    }
    return object;
}

--2.

describe("isOddOrEven function test", function () {
    it("Should return undefined", function () {
        let notString = [1, 2, 3];

        let result = isOddOrEven(notString);

        expect(result).to.be.equal(undefined);
    });

    it("Should return even", function () {
        let word = "word";

        let result = isOddOrEven(word);

        expect(result).to.be.equal("even");
    });

    it("Should return odd", function () {
        let word = "words";

        let result = isOddOrEven(word);

        expect(result).to.be.equal("odd");
    });

    it("Should return even", function () {
        let word = "";

        let result = isOddOrEven(word);

        expect(result).to.be.equal("even");
    });
});

--3.

describe("lookupChar function test", function () {
    it("Should return undefined", function () {
        let notString = [1, 2, 3];
        let index = 5;

        let result = lookupChar(notString, index);

        expect(result).to.be.equal(undefined);
    });

    it("Should return undefined", function () {
        let string = "word";
        let index = 2.5;

        let result = lookupChar(string, index);

        expect(result).to.be.equal(undefined);
    });

    it("Should return Incorrect index", function () {
        let string = "word";
        let index = 5;

        let result = lookupChar(string, index);

        expect(result).to.be.equal("Incorrect index");
    });

    it("Should return Incorrect index", function () {
        let string = "word";
        let index = -5;

        let result = lookupChar(string, index);

        expect(result).to.be.equal("Incorrect index");
    });

    it("Should return w", function () {
        let string = "word";
        let index = 0;

        let result = lookupChar(string, index);

        expect(result).to.be.equal("w");
    });

    it("Should return 'm'", function () {
        let string = "stamat";
        let index = 3;

        let result = lookupChar(string, index);

        expect(result).to.be.equal("m");
    });
});

--4.

describe("mathEnforcer function test", function () {
    it("functions Should return undefined", function () {
        let number = "String";
        let number2 = 5;
        let number3 = "anotherString";

        let result = mathEnforcer.addFive(number);
        let result2 = mathEnforcer.subtractTen(number);
        let result3 = mathEnforcer.sum(number, number2);
        let result4 = mathEnforcer.sum(number2, number);
        let result5 = mathEnforcer.sum(number, number3);

        expect(result).to.be.equal(undefined);
        expect(result2).to.be.equal(undefined);
        expect(result3).to.be.equal(undefined);
        expect(result4).to.be.equal(undefined);
        expect(result5).to.be.equal(undefined);
    });

    it("addFive Should return 10, 0 and 10.5", function () {
        let number = 5;
        let numberFloat = 5.5;
        let negativeNumber = -5;

        let result = mathEnforcer.addFive(number);
        let result2 = mathEnforcer.addFive(numberFloat);
        let result3 = mathEnforcer.addFive(negativeNumber);

        expect(result).to.be.equal(10);
        expect(result2).to.be.equal(10.5);
        expect(result3).to.be.equal(0);
    });

    it("subtractTen Should return 10, -20 and 10.5", function () {
        let number = 20;
        let numberFloat = 20.5;
        let number2 = -10;


        let result = mathEnforcer.subtractTen(number);
        let result2 = mathEnforcer.subtractTen(numberFloat);
        let result3 = mathEnforcer.subtractTen(number2);

        expect(result).to.be.equal(10);
        expect(result2).to.be.equal(10.5);
        expect(result3).to.be.equal(-20);
    });

    it("sum Should return -20, 0, 10.3 and 10.5", function () {
        let number = -10;
        let numberFloat = 20.5;
        let number2 = 10;
        let number3 = -10;
        let numberFloat2 = -10.2;


        let result = mathEnforcer.sum(number, numberFloat);
        let result2 = mathEnforcer.sum(number, number2);
        let result3 = mathEnforcer.sum(number, number3);
        let result4 = mathEnforcer.sum(numberFloat, numberFloat2);

        expect(result).to.be.equal(10.5);
        expect(result2).to.be.equal(0);
        expect(result3).to.be.equal(-20);
        expect(result4).to.be.equal(10.3);
    });

});

--5.

describe('test cases for sharedObject functionality', function () {
    let testObject;
    beforeEach('init the object', function () {
        testObject = Object.create(sharedObject);
        document.body.innerHTML =
            `<div id="wrapper">
                <input type="text" id="name">
                <input type="text" id="income">
            </div>`;
    });

    describe('validate initial state', function () {
        it('should be object', () => {
            expect(testObject).to.an('object');
        });

        it('should return null on testObject.name', () => {
            expect(testObject.name).to.equal(null);
        });

        it('should return null on testObject.income', () => {
            expect(testObject.income).to.equal(null);
        });

        it('should return null on testObject.income', () => {
            expect(testObject.income).to.equal(null);
            expect(testObject.name).to.equal(null);
        });

        it('should return null on testObject.income', () => {
            expect(testObject.income).to.equal(null);
            expect($('#income').val()).to.equal('');
            expect(testObject.name).to.equal(null);
            expect($('#name').val()).to.equal('');
        });
    });

    describe('test cases for changeName(name) function', function () {
        it('should return null on testObject.name after changeName("")', () => {
            testObject.changeName('');
            expect(testObject.name).to.equal(null);
        });

        it('should return pesho on testObject.name after changeName("")', () => {
            testObject.name = 'pesho';
            testObject.changeName('');
            expect(testObject.name).to.equal('pesho');
        });

        it('should return test on testObject.name after changeName("test")', () => {
            testObject.changeName('test');
            expect(testObject.name).to.equal('test');
            expect($('#name').val()).to.equal('test');
        });

        it('should return anotherTest on testObject.name after changeName("anotherTest")', () => {
            testObject.changeName('anotherTest');
            expect(testObject.name).to.equal('anotherTest');
            expect($('#name').val()).to.equal('anotherTest');
        });

        it('should return "5" on testObject.name after changeName(5)', () => {
            testObject.changeName(5);
            expect(testObject.name).to.equal(5);
            expect($('#name').val()).to.equal('5');
        });
    });

    describe('test cases for changeIncome(income) function', function () {
        it('should return null on testObject.income after changeIncome("")', () => {
            let prevInput = $('#income').val();
            let prevPropValue = testObject.income;
            testObject.changeIncome('');
            expect(testObject.income).to.equal(prevPropValue);
            expect($('#income').val()).to.equal(prevInput);
        });

        it('should return null on testObject.income after changeIncome("")', () => {
            let prevInput = $('#income').val();
            testObject.income = 88;
            testObject.changeIncome('');
            expect(testObject.income).to.equal(88);
            expect($('#income').val()).to.equal(prevInput);
        });

        it('should return null on testObject.income after changeIncome(0)', () => {
            let prevInput = $('#income').val();
            let prevPropValue = testObject.income;
            testObject.changeIncome(0);
            expect(testObject.income).to.equal(prevPropValue);
            expect($('#income').val()).to.equal(prevInput);
        });

        it('should return null on testObject.income after changeIncome(-20)', () => {
            let prevInput = $('#income').val();
            let prevPropValue = testObject.income;
            testObject.changeIncome(-20);
            expect(testObject.income).to.equal(prevPropValue);
            expect($('#income').val()).to.equal(prevInput);
        });

        it('should return null on testObject.income after changeIncome(2.5)', () => {
            let prevInput = $('#income').val();
            let prevPropValue = testObject.income;
            testObject.changeIncome(2.5);
            expect(testObject.income).to.equal(prevPropValue);
            expect($('#income').val()).to.equal(prevInput);
        });

        it('should return "18" on testObject.income after changeIncome("18")', () => {
            testObject.changeIncome(18);
            expect(testObject.income).to.equal(18);
            expect($('#income').val()).to.equal("18");
        });

        it('should return "50" on testObject.income after {1,-5,50})', () => {
            testObject.changeIncome(1);
            testObject.changeIncome(-5);
            testObject.changeIncome(50);
            expect(testObject.income).to.equal(50);
            expect($('#income').val()).to.equal("50");
        });
    });

    describe('test cases for updateName(name) function', function () {
        it('should not change anything on updateName()', () => {
            testObject.updateName('pesho');
            expect($('#name').val()).to.equal('');
            expect(testObject.name).to.equal(null);
        });

        it('should not change anything on updateName()', () => {
            testObject.name = 'kiro';
            testObject.updateName('pesho');
            expect($('#name').val()).to.equal('');
            expect(testObject.name).to.equal('kiro');
        });

        it('should update testObject.name on updateName()', () => {
            let nameInput = $('#name');
            nameInput.val('pesho');
            testObject.updateName();
            expect(testObject.name).to.equal('pesho');
            expect(nameInput.val()).to.equal('pesho');
        });

        it('should update testObject.name on updateName()', () => {
            testObject.name = 'test';
            let nameInput = $('#name');
            nameInput.val('pesho');
            testObject.updateName();
            expect(testObject.name).to.equal('pesho');
            expect(nameInput.val()).to.equal('pesho');
        });
    });

    describe('test cases for updateIncome() function', function () {
        it('should not change anything on updateIncome()', () => {
            testObject.updateIncome();
            expect($('#income').val()).to.equal('');
        });

        it('should not change anything on updateIncome()', () => {
            let incomeInput = $('#income');
            incomeInput.val(2.5);
            testObject.updateIncome();
            expect(incomeInput.val()).to.equal('2.5');
            expect(testObject.income).to.equal(null);
        });

        it('should not change anything on updateIncome()', () => {
            let incomeInput = $('#income');
            incomeInput.val(2.5);
            testObject.updateIncome();
            expect(incomeInput.val()).to.equal('2.5');
            expect(testObject.income).to.equal(null);
        });

        it('should not change anything on updateIncome()', () => {
            let incomeInput = $('#income');
            incomeInput.val('test');
            testObject.updateIncome();
            expect(incomeInput.val()).to.equal('test');
            expect(testObject.income).to.equal(null);
        });

        it('should not change anything on updateIncome() with previously set obj.income', () => {
            testObject.income = 65;
            let incomeInput = $('#income');
            incomeInput.val(-30);
            testObject.updateIncome();
            expect(incomeInput.val()).to.equal('-30');
            expect(testObject.income).to.equal(65);
        });

        it('should not change anything on updateIncome() with previously set obj.income', () => {
            testObject.income = 65;
            let incomeInput = $('#income');
            incomeInput.val(0);
            testObject.updateIncome();
            expect(incomeInput.val()).to.equal('0');
            expect(testObject.income).to.equal(65);
        });

        it('should change income on updateIncome() {50}', () => {
            let incomeInput = $('#income');
            incomeInput.val(50);
            testObject.updateIncome();
            expect(incomeInput.val()).to.equal('50');
            expect(testObject.income).to.equal(50);
        });
    });
});

--6.

describe('test cases for nuke function', function () {
    let testObject;
    beforeEach('init the object', function () {
        document.body.innerHTML =
            `<div id="target">
                <div class="nested target">
                    <p>This is some text</p>
                </div>
                <div class="target">
                    <p>Empty div</p>
                </div>
                <div class="inside">
                    <span class="nested">Some more text</span>
                    <span class="target">Some more text</span>
                </div>
            </div>`;
    });

    it('should do nothing on invalid selectors', () => {
        let selector = $('#target');
        let prev = selector.html();
        nuke(2, "#target");
        expect(selector.html()).to.equal(prev);
    });

    it('should do nothing on nuke(2, "#target")', () => {
        let selector = $('#target');
        let prev = selector.html();
        nuke('.nested', '.inside');
        expect(selector.html()).to.equal(prev);
    });

    it('should do noting if 1 parameters isn\'t valid selector', ()=> {
        let selector1 = '#target';
        let selector2 = 'nested';
        let len = $(selector1).length;
        nuke(selector1, selector2);
        expect($(selector1).length).to.be.equal(len);
    });

    it('should do noting if parameters are equals', () => {
        let selector = '#target';
        let before = document.body.innerHTML;
        nuke(selector, selector);
        let after = document.body.innerHTML;
        expect(before).to.be.equal(after);
    });

    it('should remove nodes whit correct selectors', () => {
        let selector1 = '.target';
        let selector2 = '.nested';
        nuke(selector1, selector2);
        let after = $(selector1 + selector2);
        expect(after.length).to.be.equal(0);
    });
});

