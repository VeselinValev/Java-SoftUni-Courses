--1.

function solve(numbers, order){
    if (order === 'asc'){
        return numbers.sort((a,b) => a - b);
    }else{
        return numbers.sort((a,b) => b - a);
    }
}

--2.

function solve(){
    let typeStore = new Map();
    for (const argument of arguments) {
        let type = typeof argument;
        if (!typeStore.has(type)){
            typeStore.set(type, 1);
        }else{
            typeStore.set(type, typeStore.get(type) + 1);
        }
        console.log(typeof argument + ": " + argument);
    }
    [...typeStore.keys()].sort((x,y) => typeStore.get(y) - typeStore.get(x))
        .forEach(x => console.log(x + " = " + typeStore.get(x)))
}

--3.

function add(num) {
    let sum = num;

    function calc(num2) {
        sum += num2;
        return calc;
    }

    calc.toString = function() { return sum };
    return calc;
}

--4.

function solve(name, age, weight, height) {
    let chart = {
        "name" : name,
        "personalInfo" : {
            'age' : age,
            'weight' : weight,
            'height' : height
        },
        "BMI" : calculateBMI(weight, height),
        "status" : ""
    };

    chart.status = findStatus(chart.BMI);

    function calculateBMI(patientWeight, patientHeight){
        return patientWeight / Math.pow((patientHeight / 100), 2);
    }

    function findStatus(BMI) {
        let result = "";
        if (BMI < 18.5){
            result = 'underweight';
        }else if (BMI < 25){
            result = 'normal';
        }else if (BMI < 30){
            result = 'overweight';
        }else{
            result = 'obese';
            chart.recommendation = 'admission required';
        }
        return result;
    }
    chart.BMI = Math.round(chart.BMI);
    return chart;
}

--5.

(function() {
    return {
        add: function (vector1, vector2) {
            return [vector1[0] + vector2[0], vector1[1] + vector2[1]];
        },
        multiply: function (vector, scalar) {
            return [vector[0] * scalar, vector[1] * scalar];
        },
        length: function (vector) {
            return Math.sqrt(Math.pow(vector[0], 2) + Math.pow(vector[1], 2));
        },
        dot: function (vector1, vector2) {
            return vector1[0] * vector2[0] + vector1[1] * vector2[1];
        },
        cross: function (vector1, vector2) {
            return vector1[0] * vector2[1] - vector1[1] * vector2[0];
        }
    };
}());

--6.

function closure() {
    let ingredients = {
        carbohydrate: 0,
        protein: 0,
        flavour: 0,
        fat: 0
    };

    let products = {
        apple: {
            carbohydrate: 1,
            flavour: 2
        },
        coke: {
            carbohydrate: 10,
            flavour: 20
        },
        burger: {
            carbohydrate: 5,
            fat: 7,
            flavour: 3
        },
        omelet: {
            protein: 5,
            fat: 1,
            flavour: 1
        },
        cheverme: {
            protein: 10,
            carbohydrate: 10,
            fat: 10,
            flavour: 10
        },
    };

    return (input) => {
        let command = input.split(' ')[0];
        if (command === 'restock') {
            let [ingredient, quantity] = input.split(' ').slice(1);
            ingredients[ingredient] += +quantity;
            return "Success";
        } else if (command === 'prepare') {
            let [product, quantity] = input.split(' ').slice(1);
            let productList = Object.keys(products[product]);
            for (let i = 0; i < productList.length; i++) {
                if (products[product][productList[i]] * +quantity > ingredients[productList[i]]){
                    return `Error: not enough ${productList[i]} in stock`;
                }
            }
            for (let i = 0; i < productList.length; i++) {
                ingredients[productList[i]] -= products[product][productList[i]] * +quantity;
            }
            return "Success";
        } else {
            return `protein=${ingredients.protein} carbohydrate=${ingredients.carbohydrate} fat=${ingredients.fat} flavour=${ingredients.flavour}`
        }
    }
}

--7.

function result(command) {
    if (command === 'upvote'){
        this.upvotes = this.upvotes + 1;
    }else if (command === 'downvote'){
        this.downvotes = this.downvotes + 1;
    }else {
        let tempUpvotes = this.upvotes;
        let tempDownvotes = this.downvotes;
        if (this.upvotes + this.downvotes > 50){
            let addition = Math.ceil(Math.max(tempUpvotes, tempDownvotes) * 0.25);
            tempUpvotes += addition;
            tempDownvotes += addition;
        }
        let rating = "";
         if ((this.upvotes / (this.upvotes + this.downvotes) > 0.66) && this.upvotes + this.downvotes >= 10){
            rating = "hot"
        }else if (this.upvotes - this.downvotes >= 0 && (this.upvotes > 100 || this.downvotes > 100) && this.upvotes + this.downvotes >= 10){
            rating = "controversial"
        }else if (this.upvotes - this.downvotes < 0 && this.upvotes + this.downvotes >= 10){
            rating = "unpopular"
        }else{
            rating = "new"
        }
        return [tempUpvotes, tempDownvotes, tempUpvotes - tempDownvotes, rating];
    }
}

--8.

function result(n1, n2) {
    let remainder = 1;
    if (n1 === n2) {
        return n1;
    } else {
        if (n1 < n2) {
            let n = n1;
            n1 = n2;
            n2 = n;
        }
        remainder = n1 - n2;
        let remainderOut = 0;
        while (remainder !== 0) {
            let remainderTemp = remainder;
            remainder = n2 % remainderTemp;
            n2 = remainderTemp;
            if (remainder !== 0) {
                remainderOut = remainder;
            } else {
                remainderOut = remainderTemp;
            }
        }
        return remainderOut;
    }
}